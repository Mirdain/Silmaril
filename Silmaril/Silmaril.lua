_addon.name = 'Silmaril'
_addon.author = 'Mirdain'
_addon.version = '2.1 Windower'
_addon_description = 'Allows for buffs, debuffs, ranged attacks, skill chains, magic bursts, and casting data'
_addon.commands = {'silmaril','sm'}

packets = require 'packets'
config = require 'config'
res = require 'resources'
texts = require 'texts'

require 'tables'
require 'strings'

--Gets information about the player abilities
require 'Abilities'

--Handles aciton messages
require 'Actions'

--Used to process incoming buff packets for other party members
require 'Buffs'

--Selects and returns the spell to burst
require 'Burst'

--Handles addon commands
require 'Commands'

--Send and Receive information
require 'Connection'

--Send and Receive information
require 'Display'

--Receive commands to execute
require 'Input'

--Build the inventory information
require 'Inventory'

--Allows for Geomancy and any future Buff updates by remapping to Silmaril
require 'Maps'

--Controls moving of charater
require 'Moving'

--Gets information about the current party and alliance
require 'Party'

--Gets information about the player
require 'Player'

--Monitors action packets to build skillchains with
require 'Skillchain'

--Gets information about the player spells
require 'Spells'

--Gets information about ffxi and sends to the Silmaril
require 'Sync'

--Used to handle targets and identify wanted enemies
require 'Tracking'

--Sets pace and updates globals form windower
require 'Update'

--Gets information about the world
require 'World'

-- These are Windower Raw values and refreshed via the "Update" function
player = {} -- get_player() 
pet = {}
party = {} -- get_party()
inventory = {} -- get_bag_info(0)
mob_array = {} -- get_mob_array()
world = {} -- get_info()
ability_recasts = {} -- get_ability_recasts()
spell_recasts = {} -- get_spell_recasts()
spells_have = {} -- get_spells() via Update.lua

-- Global one time loads
all_spells = res.spells -- Table with all spells (loaded from windower resource files)
all_buffs = res.buffs -- Table with all buffs (loaded from windower resource files)
all_abilities = res.job_abilities -- Table with all abilities (loaded from windower resource files)
all_ability_recasts = res.ability_recasts -- Table with all abilities (loaded from windower resource files)
all_weaponskills = res.weapon_skills --Table with all weaponskills (loaded from windower resource files)
all_status = res.statuses --Table with all player status (loaded from windower resource files)
all_jobs = res.jobs -- Table with all jobs (loaded from windower resource files)
all_traits = res.job_traits -- Table with all traits (loaded from windower resource files)

-- Built strings to send to the Silmaril
party_data = {} -- holds party information (generated by Party.lua)
party_buffs = {} -- holds buff list (generated by Player.lua and by Buffs.lua via packets)
player_status = {} -- hold character information (generated by Player.lua)
player_job_abilities_recasts = {} -- holds the characters recast timers of JA's (generated by Abilities.lua)
player_spell_recasts = {} -- holds the characters recast timers of spells (generated by Spells.lua)
player_world_data = {} -- holds the information on the world data
player_enemy_data = {} -- holds the information on the enemies data
player_location = {x=0, y=0, z=0} -- stores the location of player via Moving_Check() in Moving.lua

-- Contains job specific information
player_abilities = {} -- used via "job_sync" in "Sync.lua"

-- Custom table to get spells usable on current job in Spells.lua
player_spell_usable = {}

-- Global variables
enabled = false
connected = false
loaded = false
moving = true
delay_time = 0 -- Assign a random number to stagger the instances

update_rate = .25 -- rate at which the updates are sent to Silmaril
last_update = os.clock()

update_movement = .1 -- rate at which movement checks are done
last_movement = os.clock()

update_inventory = 1 -- rate at which the game checks the players inventory
last_inventory = os.clock()

--Commands recieved and sent to addon
windower.register_event('addon command', function(input, ...)
    local args = L{...}
    commands(input,args)
end)

--Used to collect buffs of other instances on the same pc
windower.register_event('ipc message', function(msg)
    local args = msg:split(' ')
    local command = args:remove(1)
    if command == 'update' then
    end
end)

-- Used to track party buffs
windower.register_event('incoming chunk', function (id, packet)
    if id == 0x076 then
        run_buffs(id, packet)
    end
    if id == 0x28 then
        run_burst(id, packet)
    end
end)

windower.register_event('load', function()
    randomseed()
    delay_time = math.random(100,200)/100
    connect()
end)

windower.register_event('logout', function()
    send_packet("command_"..tostring(player.name).."_reset")
    disconnect()
end)

windower.register_event('job change', function()
    coroutine.sleep(5)
    player = windower.ffxi.get_player()
    get_player_spells()
end)

windower.register_event('zone change', function()
    player = windower.ffxi.get_player()
    if player then
        send_packet("command_"..tostring(player.name).."_stop")
    end
end)

windower.register_event('unload', function()
    send_packet("command_"..tostring(player.name).."_reset")
    disconnect()
end)

windower.register_event('action', function (data)
    action_message(data)
end)

windower.register_event('prerender', function()
    if loaded then
        receive_info()
        local now = os.clock() -- used to determine the elapsed time
        if now - last_movement > update_movement and enabled then
            --log('Movement called')
            Moving_Check() -- Update the player location and do any movements via Moving.lua.  This allows accurate movements
            last_movement = now
        end
        if now - last_inventory > update_inventory and enabled then
            get_inventory()
            last_inventory = now
        end
        if now - last_update > update_rate then
            if not connected then
                request()
            elseif enabled then
                update() -- Via Update.lua
            else
                heart_beat()
            end
            if settings.display == true and enabled then
                sm_display:show()
                sm_display:text(display_box_refresh())
            else
                sm_display:hide()
            end
            if settings.debug == true then
                sm_debug:text(debug_box_refresh())
            end
            last_update = now
        end
    end
end)

function log (msg)
    if settings.debug == true then
        if msg == nil then
            windower.add_to_chat(80,'---- Value is Nil ----')
        elseif type(msg) == "table" then
            for index, value in pairs(msg) do
                windower.add_to_chat(80,'---- '..tostring(value)..' ----')
            end
        elseif type(msg) == "number" then
            windower.add_to_chat(80,'---- '..tostring(msg)..' ----')
        elseif type(msg) == "string" then
            windower.add_to_chat(80,'---- '..msg..' ----')
        elseif type(msg) == "boolean" then
            windower.add_to_chat(80,'---- '..tostring(msg)..' ----')
        else
            windower.add_to_chat(80,'---- Unknown Debug Message ----')
        end
    end
end

function info (msg)
    if msg == nil then
        windower.add_to_chat(7,'---- Value is Nil ----')
    elseif type(msg) == "table" then
        for index, value in pairs(msg) do
            windower.add_to_chat(7,'---- '..tostring(value)..' ----')
        end
    elseif type(msg) == "number" then
        windower.add_to_chat(7,'---- '..tostring(msg)..' ----')
    elseif type(msg) == "string" then
        windower.add_to_chat(5,'---- '..msg..' ----')
    elseif type(msg) == "boolean" then
        windower.add_to_chat(7,'---- '..tostring(msg)..' ----')
    else
        windower.add_to_chat(7,'---- Unknown Debug Message ----')
    end
end

function tablelength(T)
    local count = 0
    for _ in pairs(T) do count = count + 1 end
    return count
end

function randomseed()
    --Generate your seed
    seed = os.clock()*1000
    log("Your random Seed is ["..seed.."]")
    math.randomseed(seed)
end

function round(num, numDecimalPlaces)
  local mult = 10^(numDecimalPlaces or 0)
  return math.floor(num * mult + 0.5) / mult
end